Recurrence Relation Introduction

Recursion example:- Factorial of any given number.

It can be solved by using three methods:-

1. Substitution Method.

2. Recursion Tree Approach.

3. Masters Theorem.

substitution method:-

Example-1 =:- T(n) = 1  when n=1   =>  T(1) = 1

	    T(n-1) + n  when n>1

lets solve this:- 

    T(n) = T(n-1)+n         
	
    Lets replace n = n-1

    T(n-1) = T(n-2)+n-1...........(1)

    lets replace eq-1 in T(n)

     T(n) = T(n-3) + n-2 + n-1 + n

                 * 		n-k = 1  => n-1 = k
		 *(k-times)
 		 *
     = T(n-k) + (n-k+1) + (n-k+2) + (n-k+3) + ........ + n-1 + n

     = T(n-(n-1)) + (n-(n-1)+1) + (n-(n-1)+2) + ...... + n-1 + n

     = T(1) + 2 + 3 + 4 + 5 ......... + n-1 + n

     = 1 + 2 + 3 + ..... + n-1 + n
 
     = n(n-1)/2

     = (n^2 - n)/2

Therefore the  time complexity is O(n^2)



example - 2:- 

T(n) = 1 when n = 1;

T(n)= T(n-1) + 1/n when n>1


replace n = n-1

T(n-1) = T(n-2) + 1/n-1 ......(1)

T(n) = T(n-2) + 1/n-1 + 1/n

again replace n-2 value 

T(n) = T(n-3) + 1/n-2 + 1/n-1 + ......+ 1/n

n-k = 1
n-1 = k

T(n) = T(n-k) + 1/n-k+1 + ...... + 1/n-1 + 1/n

T(n) = T(n-(n-1)) + 1/(n-(n-1)+1) + ----- 1/n-1 + 1/n

T(n) = T(1) + 1/2 + ...... + 1/n-1 +1/n

T(n) = 1 + 1/2 + ..... + 1/n-1 + 1/n

T(n) = logn

Therefore the time complexity is O(logn)


Example-3 :-

T(n) = 1 when n = 1

T(n) = T(n/2)+n when n>1

replace n = n/2

T(n-1) = T(n/2^2) + n/2............(1)

replace eq - 1 in T(n)

T(n) = T(n/2^2) + n/2 + n

T(n) = T(n/2^3) + n/2^2 + n/2 + n

n/2^k = 1

n = 2^k

logn = klog2

logn = k

T(n) = T(n/2^k) + n/2^k-1 + ...... + n/2 + n

T(n) = T(1) + n(1/2 + (I/2)^2 + .... (1/2)^logn-1)
  	        |				  |
		|_________________________________|
		
	 			|____It is a G.P series 
                			
					Here r =1/2
					a = 1
					a(1-r^n)/1-r

					= (1-(1/2)^n)/(1/2)

					= 1+ n(2- (1/2)^n-1)
					
					= 1+ n

	Therefore the time complexity is O(n)



Using Recursive Tree Approach:-

It is beneficial when it has more than one recursive term in a recurrence relation.

example-1:-
	T(n) = 1 when n=1

	T(n) = T(n/5) + T(4n/5) + n when n>1

	just replace n/5 and 4n/5 in both 
{Total required is n/5 + 4n/5 = n}


						n

		n/5				4/5				n

	n/5^2		4/5^2		4/5^2		42n/5^2

left side ==> n/5^k = 1			right side ==> n/(5/4)^k = 1

		n = 5^k				k = lognbase(5/4)

		k = lognbase5

How to find which k value is greater :-

Lower the base higher the value.

so the k = lognbase(5/4) id greater value.

s = nlogn

Time complexity is O(nlogn)


example:- 2 

T(n) = 1 when n = 1

T(n) = T(n/5) + T(3n/5) + n when n>1

Recursive tree approach

{Total required is n/5 + 3n/5 = 4n/5}
			         		n

		n/5				3n/5				n

	n/5^2		3n/5^2		3n/5^2		3^2n/5^2	


left side ==> n/5^k = 1			Right side ==> n/(5/3)^k = 1

	       n = 5^k				        k = lognbase(5/3)
	
	       k = lognbase5


How to find which k value is greater :-

Lower the base higher the value.

so the k = lognbase(5/3) id greater value.


(4/5)^0n + (4/5)^1n + ............ + (4/5)lognbase(5/3)n

= n(4/5)+ (4/5)^2 + ...... + (4/5)lognbase(5/3))

it is in gp series 

so r = 4/5

   a = 1

= n(1-(4/5)^n)/(1-4/5)
    |________________|
          O(1)

=  n.O(1)

Time complexity is O(n)


Example:- 3 

T(n) = 1 when n = 1

T(n) = T(n/2) + T(n/3) + T(n/5) + c when n>1
{Total required is n/2 + n/3 + n/5 = 



						n

		n/2			n/3			n/5			c

n/2^2 		n/6	n/10	n/6	n/3^2	n/15	n/10	n/15	n/5^2		3c


left side = n/2^k = 1		iddle side => n/3^k= 1			leftside =>

n = 2^k														k = lognbase3					n/5^k = 1
k = lognbase2										
									k = lognbase5
						

		
How to find which k value is greater :-

Lower the base higher the value.

so the k = lognbase2 greater value.


= c((3)^0 + (3)^1 + .......... + (3)^logn)
    |____________________________________|
			G.p series

		a = 1
		r = 3
= c((3lognbase2-1)/2)

= c(n^1.5 - 1)/2)

= O(n^1.5)

= O(n^2)

Time complexity is O(n^2).



Masters Theorem:-


T(n) = a.T(n/b) + F(n)

	a & b are positive integers; a>=1,b>1

f(n) = O(n^klogn) it is a positive functiomn.

case-1 if logabaseb > k

	==> O(n^logabaseb)
case-2 if logabaseb = k			

	p>-1 => O(n^klogp+1 n) 

	p = -1 => O(n^k loglogn)

	p<-1 => O(n^k)

Case-3 logabaseb < k

	p>=0 => O(n^klogpn)

	p<0  => O(n^k)


Example:-1(case-2)

T(n) = 2T(n/2) + n

a = 2		k = 1
b = 2		p = 0

logabaseb = 1

where logabaseb = k

as p > -1

Time complexity is O(nlogn)


example :-2 

T(n) = 8T(n/2) + n^3 

a = 8	k = 3
b = 2	p = 0

logabaseb = 3

where logabaseb = k

as p > -1

Time complexity is O(n^3logn)

example :- 3

T(n) = 2T(n/2) + n/(logn)

a = 2 k = 1
b = 2 p = -1

logabaseb  = 1 

where logabaseb = k

as p = -1

Time complexity is O(nloglogn)

T(n) = 2T(n/2) + n^2

a = 2	k = 2
b = 2   p = 1

logabaseb = 1

where logabaseb < k

as p >=0

Time complexity is O(n^2logn)

